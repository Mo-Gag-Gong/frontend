// Generated by Dagger (https://dagger.dev).
package kr.ac.uc.test_2025_05_19_k.di;

import dagger.Lazy;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kr.ac.uc.test_2025_05_19_k.network.ApiService;
import kr.ac.uc.test_2025_05_19_k.network.AuthInterceptor;
import kr.ac.uc.test_2025_05_19_k.repository.TokenManager;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvideAuthInterceptorFactory implements Factory<AuthInterceptor> {
  private final Provider<TokenManager> tokenManagerProvider;

  private final Provider<ApiService> apiServiceProvider;

  public NetworkModule_ProvideAuthInterceptorFactory(Provider<TokenManager> tokenManagerProvider,
      Provider<ApiService> apiServiceProvider) {
    this.tokenManagerProvider = tokenManagerProvider;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public AuthInterceptor get() {
    return provideAuthInterceptor(tokenManagerProvider.get(), DoubleCheck.lazy(apiServiceProvider));
  }

  public static NetworkModule_ProvideAuthInterceptorFactory create(
      Provider<TokenManager> tokenManagerProvider, Provider<ApiService> apiServiceProvider) {
    return new NetworkModule_ProvideAuthInterceptorFactory(tokenManagerProvider, apiServiceProvider);
  }

  public static AuthInterceptor provideAuthInterceptor(TokenManager tokenManager,
      Lazy<ApiService> apiService) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideAuthInterceptor(tokenManager, apiService));
  }
}
