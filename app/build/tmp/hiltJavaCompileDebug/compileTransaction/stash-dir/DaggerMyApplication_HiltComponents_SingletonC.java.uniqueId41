// Generated by Dagger (https://dagger.dev).
package kr.ac.uc.test_2025_05_19_k;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.gson.Gson;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kr.ac.uc.test_2025_05_19_k.data.local.UserPreference;
import kr.ac.uc.test_2025_05_19_k.di.AppModule;
import kr.ac.uc.test_2025_05_19_k.di.AppModule_ProvideProfileCacheManagerFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideApiServiceFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideAuthInterceptorFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideGoalApiServiceFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideGroupApiFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideGsonFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideOkHttpClientFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideRetrofitFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideTokenManagerFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideUserApiFactory;
import kr.ac.uc.test_2025_05_19_k.di.NetworkModule_ProvideUserApiServiceFactory;
import kr.ac.uc.test_2025_05_19_k.di.RepositoryModule;
import kr.ac.uc.test_2025_05_19_k.di.RepositoryModule_ProvideGroupRepositoryFactory;
import kr.ac.uc.test_2025_05_19_k.di.RepositoryModule_ProvideUserRepositoryFactory;
import kr.ac.uc.test_2025_05_19_k.network.ApiService;
import kr.ac.uc.test_2025_05_19_k.network.AuthInterceptor;
import kr.ac.uc.test_2025_05_19_k.network.api.GoalApiService;
import kr.ac.uc.test_2025_05_19_k.network.api.GroupApi;
import kr.ac.uc.test_2025_05_19_k.network.api.UserApi;
import kr.ac.uc.test_2025_05_19_k.network.api.UserApiService;
import kr.ac.uc.test_2025_05_19_k.repository.GoalRepository;
import kr.ac.uc.test_2025_05_19_k.repository.GroupRepository;
import kr.ac.uc.test_2025_05_19_k.repository.InterestRepository;
import kr.ac.uc.test_2025_05_19_k.repository.ProfileCacheManager;
import kr.ac.uc.test_2025_05_19_k.repository.ProfileRepository;
import kr.ac.uc.test_2025_05_19_k.repository.TokenManager;
import kr.ac.uc.test_2025_05_19_k.repository.UserRepository;
import kr.ac.uc.test_2025_05_19_k.ui.auth.AuthCallbackActivity;
import kr.ac.uc.test_2025_05_19_k.ui.auth.AuthCallbackActivity_MembersInjector;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GoalViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GoalViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupAdminDetailViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupAdminDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupCreateViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupCreateViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupDetailViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupEditViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupEditViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupManagementViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.GroupManagementViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.HomeViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.NoticeCreateViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.NoticeCreateViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.OnboardingViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.OnboardingViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileInputViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileInputViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import kr.ac.uc.test_2025_05_19_k.viewmodel.UserProfileViewModel;
import kr.ac.uc.test_2025_05_19_k.viewmodel.UserProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerMyApplication_HiltComponents_SingletonC {
  private DaggerMyApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder repositoryModule(RepositoryModule repositoryModule) {
      Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MyApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(GoalViewModel_HiltModules_KeyModule_ProvideFactory.provide(), GroupAdminDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), GroupCreateViewModel_HiltModules_KeyModule_ProvideFactory.provide(), GroupDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), GroupEditViewModel_HiltModules_KeyModule_ProvideFactory.provide(), GroupManagementViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide(), NoticeCreateViewModel_HiltModules_KeyModule_ProvideFactory.provide(), OnboardingViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ProfileInputViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide(), UserProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
      injectMainActivity2(arg0);
    }

    @Override
    public void injectAuthCallbackActivity(AuthCallbackActivity arg0) {
      injectAuthCallbackActivity2(arg0);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectUserPreference(instance, singletonCImpl.userPreferenceProvider.get());
      MainActivity_MembersInjector.injectTokenManager(instance, singletonCImpl.provideTokenManagerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private AuthCallbackActivity injectAuthCallbackActivity2(AuthCallbackActivity instance) {
      AuthCallbackActivity_MembersInjector.injectTokenManager(instance, singletonCImpl.provideTokenManagerProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
    private final SavedStateHandle savedStateHandle;

    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<GoalViewModel> goalViewModelProvider;

    private Provider<GroupAdminDetailViewModel> groupAdminDetailViewModelProvider;

    private Provider<GroupCreateViewModel> groupCreateViewModelProvider;

    private Provider<GroupDetailViewModel> groupDetailViewModelProvider;

    private Provider<GroupEditViewModel> groupEditViewModelProvider;

    private Provider<GroupManagementViewModel> groupManagementViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<NoticeCreateViewModel> noticeCreateViewModelProvider;

    private Provider<OnboardingViewModel> onboardingViewModelProvider;

    private Provider<ProfileInputViewModel> profileInputViewModelProvider;

    private Provider<ProfileViewModel> profileViewModelProvider;

    private Provider<UserProfileViewModel> userProfileViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.savedStateHandle = savedStateHandleParam;
      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    private GoalRepository goalRepository() {
      return new GoalRepository(singletonCImpl.provideGoalApiServiceProvider.get(), singletonCImpl.provideGroupApiProvider.get());
    }

    private InterestRepository interestRepository() {
      return new InterestRepository(singletonCImpl.provideApiServiceProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.goalViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.groupAdminDetailViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.groupCreateViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.groupDetailViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.groupEditViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.groupManagementViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.noticeCreateViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.onboardingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.profileInputViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.profileViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.userProfileViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(12).put("kr.ac.uc.test_2025_05_19_k.viewmodel.GoalViewModel", ((Provider) goalViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.GroupAdminDetailViewModel", ((Provider) groupAdminDetailViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.GroupCreateViewModel", ((Provider) groupCreateViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.GroupDetailViewModel", ((Provider) groupDetailViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.GroupEditViewModel", ((Provider) groupEditViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.GroupManagementViewModel", ((Provider) groupManagementViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.HomeViewModel", ((Provider) homeViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.NoticeCreateViewModel", ((Provider) noticeCreateViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.OnboardingViewModel", ((Provider) onboardingViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileInputViewModel", ((Provider) profileInputViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileViewModel", ((Provider) profileViewModelProvider)).put("kr.ac.uc.test_2025_05_19_k.viewmodel.UserProfileViewModel", ((Provider) userProfileViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // kr.ac.uc.test_2025_05_19_k.viewmodel.GoalViewModel 
          return (T) new GoalViewModel(viewModelCImpl.goalRepository());

          case 1: // kr.ac.uc.test_2025_05_19_k.viewmodel.GroupAdminDetailViewModel 
          return (T) new GroupAdminDetailViewModel(singletonCImpl.provideGroupRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 2: // kr.ac.uc.test_2025_05_19_k.viewmodel.GroupCreateViewModel 
          return (T) new GroupCreateViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), singletonCImpl.provideGroupRepositoryProvider.get(), viewModelCImpl.interestRepository());

          case 3: // kr.ac.uc.test_2025_05_19_k.viewmodel.GroupDetailViewModel 
          return (T) new GroupDetailViewModel(singletonCImpl.provideGroupRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 4: // kr.ac.uc.test_2025_05_19_k.viewmodel.GroupEditViewModel 
          return (T) new GroupEditViewModel(singletonCImpl.provideGroupRepositoryProvider.get(), viewModelCImpl.interestRepository(), viewModelCImpl.savedStateHandle);

          case 5: // kr.ac.uc.test_2025_05_19_k.viewmodel.GroupManagementViewModel 
          return (T) new GroupManagementViewModel(singletonCImpl.provideGroupRepositoryProvider.get());

          case 6: // kr.ac.uc.test_2025_05_19_k.viewmodel.HomeViewModel 
          return (T) new HomeViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), singletonCImpl.provideGroupRepositoryProvider.get(), viewModelCImpl.interestRepository());

          case 7: // kr.ac.uc.test_2025_05_19_k.viewmodel.NoticeCreateViewModel 
          return (T) new NoticeCreateViewModel(singletonCImpl.provideGroupRepositoryProvider.get());

          case 8: // kr.ac.uc.test_2025_05_19_k.viewmodel.OnboardingViewModel 
          return (T) new OnboardingViewModel(singletonCImpl.provideApiServiceProvider.get());

          case 9: // kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileInputViewModel 
          return (T) new ProfileInputViewModel(singletonCImpl.provideProfileCacheManagerProvider.get(), singletonCImpl.provideApiServiceProvider.get());

          case 10: // kr.ac.uc.test_2025_05_19_k.viewmodel.ProfileViewModel 
          return (T) new ProfileViewModel(singletonCImpl.profileRepositoryProvider.get());

          case 11: // kr.ac.uc.test_2025_05_19_k.viewmodel.UserProfileViewModel 
          return (T) new UserProfileViewModel(singletonCImpl.provideUserRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MyApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<TokenManager> provideTokenManagerProvider;

    private Provider<UserPreference> userPreferenceProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<ApiService> provideApiServiceProvider;

    private Provider<AuthInterceptor> provideAuthInterceptorProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Gson> provideGsonProvider;

    private Provider<GoalApiService> provideGoalApiServiceProvider;

    private Provider<GroupApi> provideGroupApiProvider;

    private Provider<GroupRepository> provideGroupRepositoryProvider;

    private Provider<ProfileCacheManager> provideProfileCacheManagerProvider;

    private Provider<ProfileRepository> profileRepositoryProvider;

    private Provider<UserApi> provideUserApiProvider;

    private Provider<UserApiService> provideUserApiServiceProvider;

    private Provider<UserRepository> provideUserRepositoryProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideTokenManagerProvider = DoubleCheck.provider(new SwitchingProvider<TokenManager>(singletonCImpl, 0));
      this.userPreferenceProvider = DoubleCheck.provider(new SwitchingProvider<UserPreference>(singletonCImpl, 1));
      this.provideRetrofitProvider = new DelegateFactory<>();
      this.provideApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<ApiService>(singletonCImpl, 6));
      this.provideAuthInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<AuthInterceptor>(singletonCImpl, 5));
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 4));
      this.provideGsonProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonCImpl, 7));
      DelegateFactory.setDelegate(provideRetrofitProvider, DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 3)));
      this.provideGoalApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<GoalApiService>(singletonCImpl, 2));
      this.provideGroupApiProvider = DoubleCheck.provider(new SwitchingProvider<GroupApi>(singletonCImpl, 8));
      this.provideGroupRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<GroupRepository>(singletonCImpl, 9));
      this.provideProfileCacheManagerProvider = DoubleCheck.provider(new SwitchingProvider<ProfileCacheManager>(singletonCImpl, 10));
      this.profileRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ProfileRepository>(singletonCImpl, 11));
      this.provideUserApiProvider = DoubleCheck.provider(new SwitchingProvider<UserApi>(singletonCImpl, 13));
      this.provideUserApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<UserApiService>(singletonCImpl, 14));
      this.provideUserRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<UserRepository>(singletonCImpl, 12));
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @Override
    public void injectMyApplication(MyApplication myApplication) {
    }

    @Override
    public TokenManager getTokenManager() {
      return provideTokenManagerProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // kr.ac.uc.test_2025_05_19_k.repository.TokenManager 
          return (T) NetworkModule_ProvideTokenManagerFactory.provideTokenManager(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 1: // kr.ac.uc.test_2025_05_19_k.data.local.UserPreference 
          return (T) new UserPreference(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 2: // kr.ac.uc.test_2025_05_19_k.network.api.GoalApiService 
          return (T) NetworkModule_ProvideGoalApiServiceFactory.provideGoalApiService(singletonCImpl.provideRetrofitProvider.get());

          case 3: // retrofit2.Retrofit 
          return (T) NetworkModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.provideOkHttpClientProvider.get(), singletonCImpl.provideGsonProvider.get());

          case 4: // okhttp3.OkHttpClient 
          return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(singletonCImpl.provideAuthInterceptorProvider.get());

          case 5: // kr.ac.uc.test_2025_05_19_k.network.AuthInterceptor 
          return (T) NetworkModule_ProvideAuthInterceptorFactory.provideAuthInterceptor(singletonCImpl.provideTokenManagerProvider.get(), DoubleCheck.lazy(singletonCImpl.provideApiServiceProvider));

          case 6: // kr.ac.uc.test_2025_05_19_k.network.ApiService 
          return (T) NetworkModule_ProvideApiServiceFactory.provideApiService(singletonCImpl.provideRetrofitProvider.get());

          case 7: // com.google.gson.Gson 
          return (T) NetworkModule_ProvideGsonFactory.provideGson();

          case 8: // kr.ac.uc.test_2025_05_19_k.network.api.GroupApi 
          return (T) NetworkModule_ProvideGroupApiFactory.provideGroupApi(singletonCImpl.provideRetrofitProvider.get());

          case 9: // kr.ac.uc.test_2025_05_19_k.repository.GroupRepository 
          return (T) RepositoryModule_ProvideGroupRepositoryFactory.provideGroupRepository(singletonCImpl.provideGroupApiProvider.get());

          case 10: // kr.ac.uc.test_2025_05_19_k.repository.ProfileCacheManager 
          return (T) AppModule_ProvideProfileCacheManagerFactory.provideProfileCacheManager(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 11: // kr.ac.uc.test_2025_05_19_k.repository.ProfileRepository 
          return (T) new ProfileRepository(singletonCImpl.provideApiServiceProvider.get());

          case 12: // kr.ac.uc.test_2025_05_19_k.repository.UserRepository 
          return (T) RepositoryModule_ProvideUserRepositoryFactory.provideUserRepository(singletonCImpl.provideUserApiProvider.get(), singletonCImpl.provideUserApiServiceProvider.get());

          case 13: // kr.ac.uc.test_2025_05_19_k.network.api.UserApi 
          return (T) NetworkModule_ProvideUserApiFactory.provideUserApi(singletonCImpl.provideRetrofitProvider.get());

          case 14: // kr.ac.uc.test_2025_05_19_k.network.api.UserApiService 
          return (T) NetworkModule_ProvideUserApiServiceFactory.provideUserApiService(singletonCImpl.provideRetrofitProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
